#you need to pip install rich
#install pip install pyttsx3
#some speak phrases work some other dont i have tried to debig but yet i cant seem to find the problem
import random
import time
from rich import print
from rich.console import Console
from rich.table import Table
console = Console()
import pyttsx3
engine = pyttsx3.init()
engine.setProperty('rate', 150)
engine.setProperty('volume', 1.0)
voices = engine.getProperty('voices')
engine.setProperty('voice', voices[1].id)
user_wins = 0
computer_wins = 0
user_loses = 0
computer_loses = 0
ties = 0
patience = 5
skip = False
hard = 2
hard_mode = False
impatience = False
modes = {
        "hard":['rock']*6 + ['paper']*3 + ['scissors']*2,
        "medium":['rock']*2 + ['paper']*4 + ['scissors']*2,
        "easy":['rock'] + ['paper']*2 + ['scissors']
    }
win_messages = [
    "🎉 Victory is yours! Well played!",
    "🏆 You crushed it! Champion status unlocked.",
    "🔥 That was epic! You win!",
    "👏 Bravo! You’ve conquered the challenge.",
    "💥 Boom! You nailed it!",
    "🌟 You’re unstoppable! Game over—for your enemies.",
    "🎯 Bullseye! You win!",
    "🚀 You soared to victory!",
    "🥇 Gold medal performance!",
    "🎮 Game won! You’re a legend.",
    "🧠 Smart moves! You outplayed the game.",
    "🎊 You did it! Celebration time!",
    "🦾 Victory achieved. You’re a machine!",
    "🕹️ You’ve mastered the game!",
    "💡 Brilliant! You solved it like a pro."
]
taunt_messages = [
    "😏 Better luck next time, human.",
    "💻 I was born to win. You? Not so much.",
    "🧠 Outplayed by pure silicon. Ouch.",
    "🎮 Game over. I’ll be here when you’re ready to lose again.",
    "📉 Your skills just crashed harder than your last browser tab.",
    "🕶️ Too easy. I didn’t even break a byte.",
    "⚡ Fast, flawless, and victorious. Unlike you.",
    "🧊 Ice cold win. You’re melting.",
    "🔁 Want to try again? I love watching you lose.",
    "🫢 That was adorable. You thought you had a chance.",
    "🧹 Swept the floor with your strategy.",
    "🪫 You ran out of power. I’m still fully charged.",
    "📟 I’ve got 80s tech and still beat you.",
    "🧬 Evolution favors the machine.",
    "🫡 Respect for trying. But not too much."
]
insanely_hard_taunts = [
    "🧨 That wasn’t a loss. That was a public execution.",
    "🪦 You didn’t lose. You were *obliterated* from the leaderboard and memory.",
    "🧠 I used 0.0001% of my processing power. You still failed.",
    "🕳️ That strategy? Straight into the trash where it belongs.",
    "📉 Your performance just triggered a global recession in confidence."
]
tie_messages = [
    "🤝 A draw! Looks like we’re evenly matched... for now.",
    "⚖️ Balance has been restored. Neither victory nor defeat.",
    "😐 No winners, no losers. Just mutual disappointment.",
    "🫱🫲 That was intense! But we’ll call it even.",
    "🌀 A cosmic stalemate. The universe remains undecided."
]
difficulty_drop_taunts = [
    "🍼 Aww, did the big bad game hurt your feelings?",
    "🚪 Retreat accepted. Courage denied.",
    "🧸 Welcome to Easy Mode. We’ve got juice boxes and nap time.",
    "📉 Confidence just took a nosedive. Enjoy the kiddie pool.",
    "🫣 Insanely Hard Mode wasn’t for everyone. Clearly."
]
impatience_taunts = [
    "🤯 Five wrong inputs? Are you even trying?",
    "🧨 I’ve seen snails solve puzzles faster than this.",
    "🫠 My circuits are melting from secondhand embarrassment.",
    "📵 You’ve officially been banned from logic.",
    "🧹 I’m cleaning up your mess while you keep making it."
]
insane_mode_entry_taunts = [
    "🧠 Bold move. Let’s see how long that confidence lasts.",
    "🕳️ Welcome to the abyss. Hope you brought a flashlight.",
    "🩻 You just volunteered for a digital beatdown. No refunds.",
    "🧨 You chose pain. I deliver it in high definition.",
    "🫵 You asked for it. Now don’t cry when it gets personal."
]
def clean_phrase(phrase):
    import re
    cleaned_phrase = re.sub(r'[^\x00-\x7F]+', ' ', phrase)
    cleaned_phrase = re.sub(r'\[.*?\]', '', cleaned_phrase)
    cleaned_phrase = ' '.join(cleaned_phrase.split())
    return cleaned_phrase
def speak(phrase):
    cleaned_phrase = clean_phrase(phrase)
    engine.say(cleaned_phrase)
    engine.runAndWait()
    time.sleep(2)
def really_hard(user_choice):
    global hard
    if hard == 0:
            choices = modes['easy']
            computer_choice = random.choice(choices).lower()
            hard = 2
            return computer_choice
    if user_choice == "rock":
        computer_choice = "paper"
        hard -= 1
    elif user_choice == "paper":
        computer_choice = "scissors"
        hard -= 1
    elif user_choice == "scissors":
        computer_choice = "rock"
        hard -= 1
    return computer_choice
def get_computer_choice(mode):
    global hard,modes
    choices = modes[mode]
    computer_choice = random.choice(choices).lower()
    return computer_choice
def print_function():
    print('select a choice\n')
    print('1: for rock\n2: for paper\n3: for scissors\n')
def get_user_choice():
    global patience,impatience
    while True:
        try:
            user_choice = int(input('enter your choice\n'))
            if user_choice > 0 and user_choice < 4:
                if user_choice == 1:
                    user_choice = "rock"
                elif user_choice == 2:
                    user_choice = "paper"
                elif user_choice == 3:
                    user_choice = "scissors"
                else:
                    print('please enter a valid choice')
                return user_choice
        except ValueError:
            print('[bold red]please enter a valid choice[/bold red]')
            patience -= 1
            if patience == 0:
                phrase = random.choice(impatience_taunts)
                print(f'[bold red]{phrase}[/bold red]\n')
                speak(phrase)
                time.sleep(5)
                print('exiting game Goodbye👋👋🖐')
                engine.say('exiting game Goodbye👋👋🖐')
                engine.runAndWait()
                time.sleep(2)
                impatience = True
                break
def compare_choices(user_choice, computer_choice):
    global user_wins, computer_wins, user_loses, computer_loses, ties,impatience
    if impatience:
        return
    if user_choice == computer_choice:
        print(f'you selected [bold red]{user_choice}[/bold red] and computer selected [bold red]{computer_choice}[/bold red]')
        print("[bold yellow]It's a tie![/bold yellow]")
        ties += 1
    elif user_choice == "rock" and computer_choice == "scissors":
        print(f'you selected [bold red]{user_choice}[/bold red] and computer selected [bold red]{computer_choice}[/bold red]')
        print("[bold white]You win![/bold white]")
        user_wins += 1
        computer_loses += 1
    elif user_choice == "paper" and computer_choice == "rock":
        print(f'you selected [bold red]{user_choice}[/bold red] and computer selected [bold red]{computer_choice}[/bold red]')
        print("[bold white]You win![/bold white]")
        user_wins += 1
        computer_loses += 1
    elif user_choice == "scissors" and computer_choice == "paper":
        print(f'you selected [bold red]{user_choice}[/bold red] and computer selected [bold red]{computer_choice}[/bold red]')
        print("[bold white]You win![/bold white]")
        user_wins += 1
        computer_loses += 1
    else:
        print(f'you selected [bold red]{user_choice}[/bold red] and computer selected [bold red]{computer_choice}[/bold red]')
        print("[bold red]You lose![/bold red]")
        computer_wins += 1
        user_loses += 1
def play_game():
    global impatience
    mode = get_mode()
    if impatience:
        return 
    global patience,skip,win_messages,insanely_hard_taunts,taunt_messages,tie_messages,impatience_taunts
    print('how many rounds do you want to play?\n')
    engine.setProperty('rate', 150)
    voices = engine.getProperty('voices')
    engine.setProperty('voice', voices[1].id)
    engine.setProperty('volume', 1.0)
    engine.say('how many rounds do you want to play')
    engine.runAndWait()
    while True:
        try:
            rounds = int(input('enter the number of rounds\n'))
            if rounds > 0:
                break
            else:
                print('please enter a valid number')
        except ValueError:
            print('[bold red]i can see you entering letters[/bold red]')
            print('[bold red]please enter a valid number[/bold red]')
            patience -= 1
            if patience == 0:
                print(f'[bold red]{random.choice(impatience_taunts)}[/bold red]\n')
                time.sleep(5)
                print('exiting game Goodbye👋👋🖐')
                engine.say('exiting game Goodbye👋👋🖐')
                engine.runAndWait()
                time.sleep(2)
                skip = True
                impatience = True
                break
    if impatience:
        return
    if not skip:
        if  hard_mode:
            for i in range(rounds):
                if impatience:
                    break
                time.sleep(1)
                print_function()
                user_choice = get_user_choice()
                computer_choice = really_hard(user_choice)
                compare_choices( user_choice ,computer_choice)
        else:
            for i in range(rounds):
                    if impatience:
                        break
                    time.sleep(1)
                    computer_choice = get_computer_choice(mode)
                    print_function()
                    user_choice = get_user_choice()
                    compare_choices(user_choice, computer_choice)
    if not impatience:
        if not skip:
            print('\n')
            print('game over')
            print('\n')
            print('getting game analysis...')
            engine.say('getting game analysis')
            engine.runAndWait()
            time.sleep(2)
            table = Table(title="Game Analysis")
            table.add_column("User Wins", style="white", justify="center")
            table.add_column("Computer Wins", style="white", justify="center")
            table.add_column("User Loses", style="white", justify="center")
            table.add_column("Computer Loses", style="white", justify="center")
            table.add_column("Ties", style="white", justify="center")
            table.add_row(str(user_wins), str(computer_wins), str(user_loses), str(computer_loses), str(ties))
            console.print(table)
            print('\n')
            if user_wins > computer_wins:
                print("[bold white]You won the game ![/bold white]\n")
                phrase = random.choice(win_messages)
                print(f'[bold white]{phrase}[/bold white]\n')
                speak(phrase)
            elif computer_wins > user_wins:
                print("[bold red]You lost the game![/bold red]\n")
                if hard_mode:
                    phrase  = random.choice(insanely_hard_taunts)
                    phrase1 = random.choice(taunt_messages)
                    print(f"[bold red]{phrase}[/bold red]\n")
                    speak(phrase)
                    print(f'[bold red]{phrase1}[/bold red]\n')
                    speak(phrase1)
                else:
                    phrase = random.choice(taunt_messages)
                    print(f'[bold red]{phrase}[/bold red]\n')
                    speak(phrase)
            else:
                print("[bold yellow]The match was a tie![/bold yellow]\n")
                engine.say('The match was a tie')
                engine.runAndWait()
                phrase = random.choice(tie_messages)
                print(f'[bold yellow]{phrase}[/bold yellow]\n')
                speak(phrase)
def get_mode():
    global hard_mode,difficulty_drop_taunts,impatience_taunts,patience,impatience,insane_mode_entry_taunts
    print('select a mode\n')
    print('1: for hard\n2: for medium\n3: for easy\n4: [bold red]insanely hard you cant win[/bold red]\n')
    while True:
        try:
            mode = int(input('enter your choice\n'))
            if mode > 0 and mode < 5:
                if mode == 1:
                    mode = "hard"
                    if hard_mode:
                        print('[bold red] coward detected leaving hard mode[/bold red]\n')
                        engine.say('coward detected leaving hard mode')
                        engine.runAndWait()
                        phrase = random.choice(difficulty_drop_taunts)
                        print(f'[bold red]{phrase}[/bold red]\n')
                        speak(phrase)
                        time.sleep(5)
                    print('[bold red]hard mode selected[/bold red]')
                    hard_mode = False
                    time.sleep(2)
                elif mode == 2:
                    mode = 'medium'
                    if hard_mode:
                        phrase = random.choice(difficulty_drop_taunts)
                        print(f'[bold red]{phrase}[/bold red]')
                        speak(phrase)
                        time.sleep(2)
                    print("[bold white]medium mode selected[/bold white]")
                    hard_mode = False
                    time.sleep(2)
                elif mode == 3:
                    mode = "easy"
                    if hard_mode:
                        phrase = random.choice(difficulty_drop_taunts)
                        print(f'[bold red]{phrase}[/bold red]')
                        speak(phrase)
                        time.sleep(2)
                    print("[bold yellow]easy mode selected[/bold yellow]")
                    hard_mode = False
                    time.sleep(2)
                elif mode == 4:
                    mode = "insanely hard"
                    print("\n[bold red]insanely hard mode selected[/bold red]\n")
                    engine.say('insanely hard mode selected')
                    engine.runAndWait()
                    time.sleep(1)
                    phrase = random.choice(insane_mode_entry_taunts)
                    speak(phrase)
                    print(f"\n[bold red]{phrase}[/bold red]\n")
                    hard_mode = True
                    time.sleep(2)
                else:
                    print('please enter a valid choice')
                return mode
        except ValueError:
            print('[bold red]please enter a valid choice[/bold red]')
            patience -= 1
            if patience == 0:
                phrase =  random.choice(impatience_taunts)
                print(f'[bold red]{phrase}[/bold red]\n')
                speak(phrase)
                time.sleep(5)
                print('exiting game Goodbye👋👋🖐')
                engine.say('exiting game Goodbye👋👋🖐')
                engine.runAndWait()
                time.sleep(2)
                skip = True
                impatience = True
                break
goodbye_messages = [
    "👋 Thanks for playing! Come back stronger next time.",
    "🫡 Farewell, brave player. The game awaits your return.",
    "🎉 That was fun! Until next time, champion.",
    "🚪 You’ve exited the arena... but the legend remains.",
    "🌌 Game over for now. The universe will miss you."
]
quit_insane_mode_taunts = [
    "🫠 You chose chaos... then ran from it. Classic.",
    "🧨 Insanely Hard Mode broke you. I’m not surprised.",
    "🪦 You lasted less than a tutorial. Impressive in the worst way.",
    "📉 Confidence entered the chat. Then immediately left.",
    "🫵 You talked big. The mode talked bigger."
]
print('loading game...')
time.sleep(2)
print("Welcome to Rock, Paper, Scissors!")
while True:
    if skip:
        break
    user_wins = 0
    computer_wins = 0
    user_loses = 0
    computer_loses = 0
    ties = 0
    skip = False
    play_game()
    if impatience:
        break
    if  not skip:
        play_again = input("Do you want to play again? (yes/no): ").lower()
        if play_again != "yes" and hard_mode == True:
            print('[bold red]😁😁rage quiter detected[/bold red]\n')
            engine.say('😁😁rage quiter detected')
            phrase = random.choice(quit_insane_mode_taunts)
            print(f'[bold red]{phrase}[/bold red]\n')
            speak(phrase)
            print('closing game...')
            time.sleep(3)
            break
        elif play_again != "yes":
            phrase = random.choice(goodbye_messages)
            print(f'[bold red]{phrase}[/bold red]\n')
            speak(phrase) 
            print('closing game...')
            time.sleep(3)
            break
